# Environment Promotion Workflow - GitOps Pattern
# Promotes application configurations between environments

name: Environment Promotion v2

on:
  workflow_dispatch:
    inputs:
      source_env:
        description: 'Source environment'
        required: true
        default: 'qa' 
        type: choice
        options:
        - qa
        - staging
        - prod 
      target_env:
        description: 'Target environment'
        required: true
        default: 'staging' 
        type: choice
        options:
        - qa
        - staging
        - prod 
      promote_container:
        description: 'Promote container configuration'
        required: true 
        type: boolean 
        default: true
      promote_replicas:
        description: 'Promote replica configuration'
        required: true 
        type: boolean 
        default: true
      promote_configmaps:
        description: 'Promote application settings'
        required: true 
        type: boolean 
        default: false
      message:
        description: 'Commit message'
        required: true 
        type: string  
        default: 'Environment promotion'

jobs:
  validate-promotion:
    name: Validate Promotion
    runs-on: ubuntu-latest
    outputs:
      can_promote: ${{ steps.validation.outputs.can_promote }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate promotion path
        id: validation
        run: |
          source="${{ inputs.source_env }}"
          target="${{ inputs.target_env }}"
          
          echo "üîç Validating promotion: $source ‚Üí $target"
          
          # Prevent promoting to the same environment
          if [ "$source" = "$target" ]; then
            echo "‚ùå Cannot promote from $source to $target (same environment)"
            echo "can_promote=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if source environment exists
          if [ ! -d "environment-promotion/envs/$source" ]; then
            echo "‚ùå Source environment directory not found: $source"
            echo "can_promote=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Define valid promotion paths
          case "$source-$target" in
            "qa-staging"|"staging-prod"|"qa-prod")
              echo "‚úÖ Valid promotion path: $source ‚Üí $target"
              echo "can_promote=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "‚ùå Invalid promotion path: $source ‚Üí $target"
              echo "Valid paths: qa‚Üístaging, staging‚Üíprod, qa‚Üíprod"
              echo "can_promote=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac

  promote:
    name: Execute Promotion
    needs: validate-promotion
    if: needs.validate-promotion.outputs.can_promote == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Prepare target environment
        run: |
          target_dir="environment-promotion/envs/${{ inputs.target_env }}"
          mkdir -p "$target_dir"
          echo "‚úÖ Target directory ready: $target_dir"

      - name: Promote container configuration
        if: ${{ inputs.promote_container }}
        run: |
          source_file="environment-promotion/envs/${{ inputs.source_env }}/environment.yaml"
          target_file="environment-promotion/envs/${{ inputs.target_env }}/environment.yaml"
          
          if [ -f "$source_file" ]; then
            cp "$source_file" "$target_file"
            echo "‚úÖ Promoted container configuration (environment.yaml)"
          else
            echo "‚ùå Container configuration not found in source environment"
            exit 1
          fi

      - name: Promote replica configuration
        if: ${{ inputs.promote_replicas }}
        run: |
          source_file="environment-promotion/envs/${{ inputs.source_env }}/replicas.yaml"
          target_file="environment-promotion/envs/${{ inputs.target_env }}/replicas.yaml"
          
          if [ -f "$source_file" ]; then
            cp "$source_file" "$target_file"
            echo "‚úÖ Promoted replica configuration (replicas.yaml)"
          else
            echo "‚ùå Replica configuration not found in source environment"
            exit 1
          fi

      - name: Promote service configuration
        if: ${{ inputs.promote_configmaps }}
        run: |
          source_file="environment-promotion/envs/${{ inputs.source_env }}/service.yaml"
          target_file="environment-promotion/envs/${{ inputs.target_env }}/service.yaml"
          
          if [ -f "$source_file" ]; then
            cp "$source_file" "$target_file"
            echo "‚úÖ Promoted service configuration (service.yaml)"
          else
            echo "‚ö†Ô∏è Service configuration not found in source environment (skipping)"
          fi

      - name: Promote kustomization
        if: ${{ inputs.promote_configmaps }}
        run: |
          source_file="environment-promotion/envs/${{ inputs.source_env }}/kustomization.yaml"
          target_file="environment-promotion/envs/${{ inputs.target_env }}/kustomization.yaml"
          
          if [ -f "$source_file" ]; then
            cp "$source_file" "$target_file"
            echo "‚úÖ Promoted kustomization configuration (kustomization.yaml)"
          else
            echo "‚ö†Ô∏è Kustomization configuration not found in source environment (skipping)"
          fi

      - name: Validate promoted files
        run: |
          echo "üîç Validating promoted configurations..."
          target_dir="environment-promotion/envs/${{ inputs.target_env }}"
          
          # Install PyYAML for validation
          python3 -m pip install PyYAML --quiet
          
          # Validate each YAML file
          for file in "$target_dir"/*.yaml; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                echo "   ‚úÖ $filename - Valid YAML"
              else
                echo "   ‚ùå $filename - Invalid YAML syntax"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ All configurations validated successfully"

      - name: Create promotion summary
        run: |
          echo "## üöÄ Environment Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Source Environment:** ${{ inputs.source_env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** ${{ inputs.target_env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Promotion Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Promoted Components:" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.promote_container }}" = "true" ]; then
            echo "- ‚úÖ Container Configuration (environment.yaml)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.promote_replicas }}" = "true" ]; then
            echo "- ‚úÖ Replica Configuration (replicas.yaml)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.promote_configmaps }}" = "true" ]; then
            echo "- ‚úÖ Service Configuration (service.yaml)" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Kustomization Configuration (kustomization.yaml)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Target Environment Status:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -la environment-promotion/envs/${{ inputs.target_env }}/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Commit promoted changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            üöÄ ${{ inputs.message }}
            
            Environment: ${{ inputs.source_env }} ‚Üí ${{ inputs.target_env }}
            Components:
            - Container config: ${{ inputs.promote_container }}
            - Replica config: ${{ inputs.promote_replicas }}
            - Application settings: ${{ inputs.promote_configmaps }}
            
            Automated promotion via GitHub Actions
          file_pattern: 'environment-promotion/envs/${{ inputs.target_env }}/*'

  notify-success:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: promote
    if: success()
    
    steps:
      - name: Promotion success
        run: |
          echo "üéâ Environment Promotion Completed Successfully!"
          echo "=============================================="
          echo ""
          echo "üìä Promotion Details:"
          echo "   ‚Ä¢ Source Environment: ${{ inputs.source_env }}"
          echo "   ‚Ä¢ Target Environment: ${{ inputs.target_env }}"
          echo "   ‚Ä¢ Container Config: ${{ inputs.promote_container }}"
          echo "   ‚Ä¢ Replica Config: ${{ inputs.promote_replicas }}"
          echo "   ‚Ä¢ Application Settings: ${{ inputs.promote_configmaps }}"
          echo "   ‚Ä¢ Completed: $(date)"
          echo ""
          echo "‚úÖ Environment ${{ inputs.target_env }} is now ready for deployment!"
          echo ""
          echo "üîó Next Steps:"
          echo "   1. Verify the promoted configurations"
          echo "   2. Deploy to ${{ inputs.target_env }} environment"
          echo "   3. Run post-deployment tests"

  notify-failure:
    name: Failure Notification
    runs-on: ubuntu-latest
    needs: [validate-promotion, promote]
    if: failure()
    
    steps:
      - name: Promotion failure
        run: |
          echo "‚ùå Environment Promotion Failed!"
          echo "==============================="
          echo ""
          echo "üìä Attempted Promotion:"
          echo "   ‚Ä¢ Source: ${{ inputs.source_env }}"
          echo "   ‚Ä¢ Target: ${{ inputs.target_env }}"
          echo "   ‚Ä¢ Failed: $(date)"
          echo ""
          echo "üîç Troubleshooting Steps:"
          echo "   1. Check workflow logs for specific error messages"
          echo "   2. Verify source environment files exist and are valid"
          echo "   3. Ensure promotion path is valid (qa‚Üístaging‚Üíprod)"
          echo "   4. Check file permissions and YAML syntax"
          echo ""
          echo "üìû Need help? Check the workflow run details above."