# Promote a GitOps application from one environment to the next

name: Simple Application Promotion (Fixed)

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      source_env:
        description: 'Source environment'
        required: true
        default: 'qa' 
        type: choice
        options:
        - qa
        - staging
        - prod 
      target_env:
        description: 'Target environment'
        required: true
        default: 'staging' 
        type: choice
        options:
        - qa
        - staging
        - prod 
      promote_container:
        description: 'Promote container tag'
        required: true 
        type: boolean 
        default: true
      promote_replicas:
        description: 'Also promote replica configuration'
        required: true 
        type: boolean 
        default: true
      promote_configmaps:
        description: 'Also promote application settings'
        required: true 
        type: boolean 
        default: false
      message:
        description: 'Commit message'
        required: true 
        type: string  
        default: 'Application promotion'

jobs:
  validate-promotion:
    name: Validate Promotion Path
    runs-on: ubuntu-latest
    outputs:
      can_promote: ${{ steps.validation.outputs.can_promote }}
    steps:
      - name: Validate promotion path
        id: validation
        run: |
          source="${{ inputs.source_env }}"
          target="${{ inputs.target_env }}"
          
          # Prevent promoting to the same environment
          if [ "$source" = "$target" ]; then
            echo "‚ùå Cannot promote from $source to $target (same environment)"
            echo "can_promote=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Define valid promotion paths
          case "$source-$target" in
            "qa-staging"|"staging-prod")
              echo "‚úÖ Valid promotion path: $source ‚Üí $target"
              echo "can_promote=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "‚ùå Invalid promotion path: $source ‚Üí $target"
              echo "Valid paths: qa‚Üístaging, staging‚Üíprod"
              echo "can_promote=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac

  promote:
    name: Promote Application
    needs: validate-promotion
    if: needs.validate-promotion.outputs.can_promote == 'true'
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Copy container version
        if: ${{ inputs.promote_container }}
        run: |
          source_file="environment-promotion/envs/${{ inputs.source_env }}/environment.yaml"
          target_file="environment-promotion/envs/${{ inputs.target_env }}/environment.yaml"
          
          if [ -f "$source_file" ]; then
            cp "$source_file" "$target_file"
            echo "‚úÖ Copied environment.yaml from ${{ inputs.source_env }} to ${{ inputs.target_env }}"
          else
            echo "‚ùå Source file not found: $source_file"
            exit 1
          fi

      - name: Copy replica configuration
        if: ${{ inputs.promote_replicas }}
        run: |
          source_file="environment-promotion/envs/${{ inputs.source_env }}/replicas.yaml"
          target_file="environment-promotion/envs/${{ inputs.target_env }}/replicas.yaml"
          
          if [ -f "$source_file" ]; then
            cp "$source_file" "$target_file"
            echo "‚úÖ Copied replicas.yaml from ${{ inputs.source_env }} to ${{ inputs.target_env }}"
          else
            echo "‚ùå Source file not found: $source_file"
            exit 1
          fi

      - name: Copy service configuration
        if: ${{ inputs.promote_configmaps }}
        run: |
          source_file="environment-promotion/envs/${{ inputs.source_env }}/service.yaml"
          target_file="environment-promotion/envs/${{ inputs.target_env }}/service.yaml"
          
          if [ -f "$source_file" ]; then
            cp "$source_file" "$target_file"
            echo "‚úÖ Copied service.yaml from ${{ inputs.source_env }} to ${{ inputs.target_env }}"
          else
            echo "‚ö†Ô∏è Source file not found: $source_file (skipping)"
          fi

      - name: Copy kustomization
        if: ${{ inputs.promote_configmaps }}
        run: |
          source_file="environment-promotion/envs/${{ inputs.source_env }}/kustomization.yaml"
          target_file="environment-promotion/envs/${{ inputs.target_env }}/kustomization.yaml"
          
          if [ -f "$source_file" ]; then
            cp "$source_file" "$target_file"
            echo "‚úÖ Copied kustomization.yaml from ${{ inputs.source_env }} to ${{ inputs.target_env }}"
          else
            echo "‚ö†Ô∏è Source file not found: $source_file (skipping)"
          fi

      - name: List files before validation
        run: |
          echo "üìÅ Files in source environment (${{ inputs.source_env }}):"
          ls -la environment-promotion/envs/${{ inputs.source_env }}/ || echo "Source directory not found"
          
          echo ""
          echo "üìÅ Files in target environment (${{ inputs.target_env }}):"
          ls -la environment-promotion/envs/${{ inputs.target_env }}/ || echo "Target directory not found"

      - name: Create promotion summary
        run: |
          echo "## üöÄ Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Source Environment:** ${{ inputs.source_env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** ${{ inputs.target_env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Container Promoted:** ${{ inputs.promote_container }}" >> $GITHUB_STEP_SUMMARY
          echo "**Replicas Promoted:** ${{ inputs.promote_replicas }}" >> $GITHUB_STEP_SUMMARY
          echo "**Config Promoted:** ${{ inputs.promote_configmaps }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Files Promoted:" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.promote_container }}" = "true" ]; then
            echo "- ‚úÖ environment.yaml" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.promote_replicas }}" = "true" ]; then
            echo "- ‚úÖ replicas.yaml" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.promote_configmaps }}" = "true" ]; then
            echo "- ‚úÖ service.yaml" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ kustomization.yaml" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Validate promoted files
        run: |
          echo "üîç Validating promoted files..."
          target_dir="environment-promotion/envs/${{ inputs.target_env }}"
          
          # Check if files exist and are valid YAML
          for file in environment.yaml replicas.yaml service.yaml kustomization.yaml; do
            if [ -f "$target_dir/$file" ]; then
              echo "‚úÖ Found: $file"
              # Basic YAML validation using Python
              if python3 -c "import yaml; yaml.safe_load(open('$target_dir/$file'))" 2>/dev/null; then
                echo "   ‚úÖ Valid YAML syntax"
              else
                echo "   ‚ùå Invalid YAML syntax in $file"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è  Missing: $file"
            fi
          done
          
          echo "‚úÖ All promoted files are valid"

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            üöÄ ${{ inputs.message }}
            
            Promoted from ${{ inputs.source_env }} to ${{ inputs.target_env }}
            - Container: ${{ inputs.promote_container }}
            - Replicas: ${{ inputs.promote_replicas }}
            - Config: ${{ inputs.promote_configmaps }}
            
            [skip ci]
          file_pattern: 'environment-promotion/envs/${{ inputs.target_env }}/*'

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: promote
    if: success()
    
    steps:
      - name: Success notification
        run: |
          echo "üéâ Promotion completed successfully!"
          echo "=================================="
          echo "‚Ä¢ Source: ${{ inputs.source_env }}"
          echo "‚Ä¢ Target: ${{ inputs.target_env }}"
          echo "‚Ä¢ Container promoted: ${{ inputs.promote_container }}"
          echo "‚Ä¢ Replicas promoted: ${{ inputs.promote_replicas }}"
          echo "‚Ä¢ Config promoted: ${{ inputs.promote_configmaps }}"
          echo "‚Ä¢ Timestamp: $(date)"
          echo ""
          echo "‚úÖ Environment ${{ inputs.target_env }} has been updated!"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [validate-promotion, promote]
    if: failure()
    
    steps:
      - name: Failure notification
        run: |
          echo "‚ùå Promotion failed!"
          echo "==================="
          echo "‚Ä¢ Source: ${{ inputs.source_env }}"
          echo "‚Ä¢ Target: ${{ inputs.target_env }}"
          echo "‚Ä¢ Check the workflow logs for details"
          echo "‚Ä¢ Verify the source environment files exist"
          echo "‚Ä¢ Ensure the promotion path is valid"